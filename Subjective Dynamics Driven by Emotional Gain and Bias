import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Global settings for Cognitive Computation:
plt.rcParams['figure.dpi'] = 600
plt.rcParams['font.size'] = 10  # Ensure text size â‰¥ 8pt

# Common model update function
def update_ms_biased(ms_t, G, alpha, sigma_epsilon, mu, Mo=0):
    epsilon = np.random.normal(0, sigma_epsilon)
    return (1 - G) * ms_t - alpha * ms_t**3 + G * mu + G * epsilon

# Save figure as 600 dpi black-and-white PDF
def save_pdf(fig, name):
    path = f"{name}_cogcomp_600dpi.pdf"
    fig.savefig(path, dpi=600, format='pdf', bbox_inches='tight')
    plt.close(fig)

# --- Parameters ---
alpha = 0.1
sigma_epsilon = 0.05
T_traj = 500
T_long = 10000
transient = 1000
T_plot = 100
T_satori_plot = 100
ms_init = 0.0
Mo = 0.0

G_gt1 = 1.5
G_lt1 = 0.3
G_neg = -0.2
G_satori = 1.0

mu_pos = 0.5
mu_neg = -0.5
mu_zero = 0.0

# =====================
# Figure 2 - Nonlinear term
# =====================
x_vals = np.linspace(-3, 3, 400)
y_vals = -alpha * x_vals**3
fig = plt.figure(figsize=(8, 3))
plt.plot(x_vals, y_vals, color='black', label=r'$-\alpha M_s^3$')
plt.axhline(0, color='black', linestyle='--')
plt.axvline(0, color='black', linestyle='--')
plt.xlabel(r'Subjective State $M_s$')
plt.ylabel(r'Term Value $-\alpha M_s^3$')
plt.grid(True, linestyle=':')
plt.tight_layout()
save_pdf(fig, "Fig2")

# =====================
# Figure 3 - G > 1 trajectories
# =====================
def generate_trajectory(G, mu):
    ms = np.zeros(T_traj)
    ms[0] = ms_init
    for t in range(T_traj - 1):
        ms[t+1] = update_ms_biased(ms[t], G, alpha, sigma_epsilon, mu, Mo)
    return ms

ms_pos = generate_trajectory(G_gt1, mu_pos)
ms_neg = generate_trajectory(G_gt1, mu_neg)

fig, axes = plt.subplots(1, 2, figsize=(10, 3.5), sharey=True)
axes[0].plot(ms_pos[:T_plot], color='black')
axes[0].axhline(mu_pos, color='black', linestyle='--')
axes[0].axhline(0, color='black', linestyle=':')
axes[0].set_title(r'Positive Bias $\mu=0.5$')
axes[0].set_xlabel('Time Step')
axes[0].set_ylabel(r'$M_s(t)$')
axes[0].grid(True, linestyle=':')

axes[1].plot(ms_neg[:T_plot], color='black', linestyle=':')
axes[1].axhline(mu_neg, color='black', linestyle='--')
axes[1].axhline(0, color='black', linestyle=':')
axes[1].set_title(r'Negative Bias $\mu=-0.5$')
axes[1].set_xlabel('Time Step')
axes[1].grid(True, linestyle=':')
plt.tight_layout()
save_pdf(fig, "Fig3")

# =====================
# Figure 4 - 0 < G < 1 trajectories
# =====================
ms_pos = generate_trajectory(G_lt1, mu_pos)
ms_neg = generate_trajectory(G_lt1, mu_neg)

fig, axes = plt.subplots(1, 2, figsize=(10, 3.5), sharey=True)
axes[0].plot(ms_pos[:T_plot], color='black')
axes[0].axhline(mu_pos, color='black', linestyle='--')
axes[0].axhline(0, color='black', linestyle=':')
axes[0].set_title(r'Positive Bias $\mu=0.5$')
axes[0].set_xlabel('Time Step')
axes[0].set_ylabel(r'$M_s(t)$')
axes[0].grid(True, linestyle=':')

axes[1].plot(ms_neg[:T_plot], color='black', linestyle=':')
axes[1].axhline(mu_neg, color='black', linestyle='--')
axes[1].axhline(0, color='black', linestyle=':')
axes[1].set_title(r'Negative Bias $\mu=-0.5$')
axes[1].set_xlabel('Time Step')
axes[1].grid(True, linestyle=':')
plt.tight_layout()
save_pdf(fig, "Fig4")

# =====================
# Figure 5 - G < 0 trajectories with stable points
# =====================
def find_stable_points(G, alpha, mu):
    coeffs = [alpha, 0, G, -G * mu]
    roots = np.roots(coeffs)
    real_roots = roots[np.isreal(roots)].real
    return sorted([r for r in real_roots if abs(1 - G - 3 * alpha * r**2) < 1.0])

stable_B1 = find_stable_points(G_neg, alpha, mu_pos)
stable_B2 = find_stable_points(G_neg, alpha, mu_neg)
ms_pos = generate_trajectory(G_neg, mu_pos)
ms_neg = generate_trajectory(G_neg, mu_neg)

fig, axes = plt.subplots(1, 2, figsize=(10, 3.5), sharey=True)
axes[0].plot(ms_pos[:T_plot], color='black')
axes[0].axhline(0, color='black', linestyle=':')
for pt in stable_B1:
    axes[0].axhline(pt, color='black', linestyle='--')
axes[0].set_title(r'Trajectory $\mu=0.5$')
axes[0].set_xlabel('Time Step')
axes[0].set_ylabel(r'$M_s(t)$')
axes[0].grid(True, linestyle=':')

axes[1].plot(ms_neg[:T_plot], color='black', linestyle=':')
axes[1].axhline(0, color='black', linestyle=':')
for pt in stable_B2:
    axes[1].axhline(pt, color='black', linestyle='--')
axes[1].set_title(r'Trajectory $\mu=-0.5$')
axes[1].set_xlabel('Time Step')
axes[1].grid(True, linestyle=':')
plt.tight_layout()
save_pdf(fig, "Fig5")

# =====================
# Figure 6 - G < 0 distributions
# =====================
def sample_distribution(stable_pts, mu):
    collected = []
    for start in stable_pts:
        ms = np.zeros(T_long)
        ms[0] = start + np.random.normal(0, 0.1)
        for t in range(T_long - 1):
            ms[t+1] = update_ms_biased(ms[t], G_neg, alpha, sigma_epsilon, mu, Mo)
        collected.append(ms[transient:])
    return np.concatenate(collected)

dist_B1 = sample_distribution(stable_B1, mu_pos)
dist_B2 = sample_distribution(stable_B2, mu_neg)

fig, axes = plt.subplots(1, 2, figsize=(10, 3.5), sharey=True)
axes[0].hist(dist_B1, bins=50, density=True, alpha=0.5, color='black')
sns.kdeplot(dist_B1, color='black', ax=axes[0], linewidth=1)
axes[0].axvline(0, color='black', linestyle=':')
for pt in stable_B1:
    axes[0].axvline(pt, color='black', linestyle='--')
axes[0].set_title(r'Distribution $\mu=0.5$')
axes[0].set_xlabel(r'$M_s$')
axes[0].set_ylabel('Density')
axes[0].grid(True, linestyle=':')

axes[1].hist(dist_B2, bins=50, density=True, alpha=0.5, color='black')
sns.kdeplot(dist_B2, color='black', ax=axes[1], linewidth=1)
axes[1].axvline(0, color='black', linestyle=':')
for pt in stable_B2:
    axes[1].axvline(pt, color='black', linestyle='--')
axes[1].set_title(r'Distribution $\mu=-0.5$')
axes[1].set_xlabel(r'$M_s$')
axes[1].grid(True, linestyle=':')
plt.tight_layout()
save_pdf(fig, "Fig6")

# =====================
# Figure 7 - Satori condition
# =====================
ms_satori = np.zeros(T_satori_plot)
ms_satori[0] = 2.0
for t in range(T_satori_plot - 1):
    ms_satori[t+1] = update_ms_biased(ms_satori[t], G_satori, alpha, sigma_epsilon, mu_zero, Mo)

fig = plt.figure(figsize=(8, 3))
plt.plot(np.arange(T_satori_plot), ms_satori, color='black')
plt.axhline(0, color='black', linestyle='--')
plt.xlabel('Time Step')
plt.ylabel(r'$M_s(t)$')
plt.grid(True, linestyle=':')
plt.tight_layout()
save_pdf(fig, "Fig7")
